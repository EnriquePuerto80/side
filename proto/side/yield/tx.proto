syntax = "proto3";
package side.yield;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/sideprotocol/side/x/yield/types";

// Msg defines the Msg service.
service Msg {
  rpc RegisterHostChain (MsgRegisterHostChain) returns (MsgRegisterHostChainResponse);
}
message MsgRegisterHostChain {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string connection_id = 1 [ (gogoproto.moretags) = "yaml:\"connection_id\"" ];
  string bech32prefix = 2;
  string host_denom = 3 [ (gogoproto.moretags) = "yaml:\"host_denom\"" ];
  string ibc_denom = 4 [ (gogoproto.moretags) = "yaml:\"ibc_denom\"" ];
  string creator = 5;
  string transfer_channel_id = 6
      [ (gogoproto.moretags) = "yaml:\"transfer_channel_id\"" ];
}

message MsgRegisterHostChainResponse {}

message DepositRecord {
  uint64 id = 1;
  string amount = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string denom = 3;
  string host_chain_id = 4;
  enum Status {
    // in transfer queue to be sent to the delegation ICA (Hub)
    TRANSFER_QUEUE = 0;
    // transfer in progress (IBC packet sent, ack not received) (to Hub)
    TRANSFER_FIRST_IN_PROGRESS = 2;
    // transfer in progress (IBC packet sent, ack not received) (from Hub to stride)
    TRANSFER_SECOND_IN_PROGRESS = 3;
    // in staking queue on delegation ICA
    DELEGATION_QUEUE = 1;
    // staking in progress (ICA packet sent, ack not received)
    DELEGATION_IN_PROGRESS = 4;
  }
  enum Source {
    SIDE = 0;
    HUB = 1;
  }
  Status status = 6;
  uint64 deposit_epoch_number = 7;
  Source source = 8;

  reserved 5;
}

