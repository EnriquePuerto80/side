// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: side/yield/host_chain.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HostChain struct {
	ChainId           string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Bech32Prefix      string `protobuf:"bytes,2,opt,name=bech32prefix,proto3" json:"bech32prefix,omitempty"`
	ConnectionId      string `protobuf:"bytes,3,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	TransferChannelId string `protobuf:"bytes,4,opt,name=transfer_channel_id,json=transferChannelId,proto3" json:"transfer_channel_id,omitempty"`
	// ibc denom on side
	IbcDenom string `protobuf:"bytes,5,opt,name=ibc_denom,json=ibcDenom,proto3" json:"ibc_denom,omitempty"`
	// native denom on host zone
	HostDenom string `protobuf:"bytes,6,opt,name=host_denom,json=hostDenom,proto3" json:"host_denom,omitempty"`
}

func (m *HostChain) Reset()         { *m = HostChain{} }
func (m *HostChain) String() string { return proto.CompactTextString(m) }
func (*HostChain) ProtoMessage()    {}
func (*HostChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_207e526ef3b01ffb, []int{0}
}
func (m *HostChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostChain.Merge(m, src)
}
func (m *HostChain) XXX_Size() int {
	return m.Size()
}
func (m *HostChain) XXX_DiscardUnknown() {
	xxx_messageInfo_HostChain.DiscardUnknown(m)
}

var xxx_messageInfo_HostChain proto.InternalMessageInfo

func (m *HostChain) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *HostChain) GetBech32Prefix() string {
	if m != nil {
		return m.Bech32Prefix
	}
	return ""
}

func (m *HostChain) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *HostChain) GetTransferChannelId() string {
	if m != nil {
		return m.TransferChannelId
	}
	return ""
}

func (m *HostChain) GetIbcDenom() string {
	if m != nil {
		return m.IbcDenom
	}
	return ""
}

func (m *HostChain) GetHostDenom() string {
	if m != nil {
		return m.HostDenom
	}
	return ""
}

func init() {
	proto.RegisterType((*HostChain)(nil), "side.yield.HostChain")
}

func init() { proto.RegisterFile("side/yield/host_chain.proto", fileDescriptor_207e526ef3b01ffb) }

var fileDescriptor_207e526ef3b01ffb = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xcd, 0x4e, 0x02, 0x31,
	0x14, 0x85, 0xa9, 0x3f, 0xc8, 0x34, 0xba, 0xb0, 0xba, 0xe0, 0x27, 0x36, 0x06, 0x37, 0xc6, 0xc5,
	0x34, 0xc8, 0x1b, 0x08, 0x0b, 0xd9, 0xba, 0x74, 0x33, 0x99, 0xfe, 0xc0, 0x34, 0x81, 0x5e, 0x32,
	0xad, 0x06, 0xde, 0xc2, 0xc7, 0x72, 0xc9, 0xd2, 0xc4, 0x8d, 0x81, 0x17, 0x31, 0xbd, 0x85, 0x18,
	0x77, 0x3d, 0xe7, 0x3b, 0xb9, 0x37, 0x3d, 0x97, 0xf6, 0xbc, 0xd5, 0x46, 0xac, 0xad, 0x99, 0x6b,
	0x51, 0x81, 0x0f, 0x85, 0xaa, 0x4a, 0xeb, 0xf2, 0x65, 0x0d, 0x01, 0x18, 0x8d, 0x30, 0x47, 0xd8,
	0xbd, 0x9e, 0xc1, 0x0c, 0xd0, 0x16, 0xf1, 0x95, 0x12, 0xdd, 0x8e, 0x02, 0xbf, 0x00, 0x5f, 0x24,
	0x90, 0xc4, 0x1e, 0xf1, 0xa4, 0x84, 0x2c, 0xbd, 0x11, 0xef, 0x03, 0x69, 0x42, 0x39, 0x10, 0x0a,
	0x0e, 0xc3, 0xfb, 0xdf, 0x84, 0x66, 0xcf, 0xe0, 0xc3, 0x28, 0x2e, 0x64, 0x1d, 0xda, 0xc2, 0xcd,
	0x85, 0xd5, 0x6d, 0x72, 0x4b, 0xee, 0xb3, 0x97, 0x33, 0xd4, 0x13, 0xcd, 0xfa, 0xf4, 0x5c, 0x1a,
	0x55, 0x0d, 0x1f, 0x97, 0xb5, 0x99, 0xda, 0x55, 0xfb, 0x08, 0xf1, 0x3f, 0x8f, 0xdd, 0xd1, 0x0b,
	0x05, 0xce, 0x19, 0x15, 0x2c, 0xe0, 0x8c, 0xe3, 0x14, 0xfa, 0x33, 0x27, 0x9a, 0xe5, 0xf4, 0x2a,
	0xd4, 0xa5, 0xf3, 0x53, 0x53, 0xc7, 0x6f, 0x3a, 0x67, 0xe6, 0x31, 0x7a, 0x82, 0xd1, 0xcb, 0x03,
	0x1a, 0x25, 0x32, 0xd1, 0xac, 0x47, 0x33, 0x2b, 0x55, 0xa1, 0x8d, 0x83, 0x45, 0xfb, 0x14, 0x53,
	0x2d, 0x2b, 0xd5, 0x38, 0x6a, 0x76, 0x43, 0x29, 0xf6, 0x95, 0x68, 0x13, 0x69, 0x16, 0x1d, 0xc4,
	0x4f, 0xe3, 0xcf, 0x2d, 0x27, 0x9b, 0x2d, 0x27, 0x3f, 0x5b, 0x4e, 0x3e, 0x76, 0xbc, 0xb1, 0xd9,
	0xf1, 0xc6, 0xd7, 0x8e, 0x37, 0x5e, 0x1f, 0x66, 0x36, 0x54, 0x6f, 0x32, 0x57, 0xb0, 0x10, 0xb1,
	0x5f, 0x6c, 0x43, 0xc1, 0x1c, 0x85, 0x58, 0xed, 0x6f, 0x11, 0xd6, 0x4b, 0xe3, 0x65, 0x13, 0xe1,
	0xf0, 0x37, 0x00, 0x00, 0xff, 0xff, 0xf2, 0x53, 0x16, 0x99, 0xa6, 0x01, 0x00, 0x00,
}

func (m *HostChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HostDenom) > 0 {
		i -= len(m.HostDenom)
		copy(dAtA[i:], m.HostDenom)
		i = encodeVarintHostChain(dAtA, i, uint64(len(m.HostDenom)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.IbcDenom) > 0 {
		i -= len(m.IbcDenom)
		copy(dAtA[i:], m.IbcDenom)
		i = encodeVarintHostChain(dAtA, i, uint64(len(m.IbcDenom)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TransferChannelId) > 0 {
		i -= len(m.TransferChannelId)
		copy(dAtA[i:], m.TransferChannelId)
		i = encodeVarintHostChain(dAtA, i, uint64(len(m.TransferChannelId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintHostChain(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Bech32Prefix) > 0 {
		i -= len(m.Bech32Prefix)
		copy(dAtA[i:], m.Bech32Prefix)
		i = encodeVarintHostChain(dAtA, i, uint64(len(m.Bech32Prefix)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintHostChain(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintHostChain(dAtA []byte, offset int, v uint64) int {
	offset -= sovHostChain(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HostChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovHostChain(uint64(l))
	}
	l = len(m.Bech32Prefix)
	if l > 0 {
		n += 1 + l + sovHostChain(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovHostChain(uint64(l))
	}
	l = len(m.TransferChannelId)
	if l > 0 {
		n += 1 + l + sovHostChain(uint64(l))
	}
	l = len(m.IbcDenom)
	if l > 0 {
		n += 1 + l + sovHostChain(uint64(l))
	}
	l = len(m.HostDenom)
	if l > 0 {
		n += 1 + l + sovHostChain(uint64(l))
	}
	return n
}

func sovHostChain(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHostChain(x uint64) (n int) {
	return sovHostChain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HostChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHostChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bech32Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bech32Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHostChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHostChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHostChain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHostChain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHostChain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHostChain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHostChain
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHostChain
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHostChain
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHostChain        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHostChain          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHostChain = fmt.Errorf("proto: unexpected end of group")
)
